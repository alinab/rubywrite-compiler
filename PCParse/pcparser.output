state 42 contains 1 shift/reduce conflicts
state 42 contains 3 reduce/reduce conflicts
state 72 contains 1 shift/reduce conflicts
state 98 contains 3 reduce/reduce conflicts
state 112 contains 1 shift/reduce conflicts


-------- Grammar --------

rule 1 target: program
rule 2 program: function_defs
rule 3 program: type_decls function_defs
rule 4 program: type_decls
rule 5 program: 
rule 6 function_defs: function_defs function_def
rule 7 function_defs: function_def
rule 8 function_def: typename IDENTIFIER "(" formal_params ")" block
rule 9 formal_params: formal_params "," formal_param
rule 10 formal_params: formal_param
rule 11 formal_param: typename
rule 12 formal_param: typename IDENTIFIER
rule 13 formal_param: typename "&" IDENTIFIER
rule 14 formal_param: typename array_formal
rule 15 formal_param: typename pointer_decl
rule 16 formal_param: 
rule 17 typename: CHAR
rule 18 typename: INT
rule 19 typename: DOUBLE
rule 20 typename: VOID
rule 21 type_decl: typename decl_list ";"
rule 22 decl_list: decl_list "," lval
rule 23 decl_list: lval
rule 24 pointer_decl: "*" IDENTIFIER
rule 25 fn_decl: IDENTIFIER "(" ")"
rule 26 fn_decl: IDENTIFIER "(" formal_params ")"
rule 27 array_formal: IDENTIFIER array_formal_subs
rule 28 array_formal_subs: array_formal_subs array_formal_sub
rule 29 array_formal_subs: array_formal_sub
rule 30 array_formal_sub: "[" expr "]"
rule 31 array_formal_sub: "[" "]"
rule 32 block: "{" stmt_list "}"
rule 33 block: 
rule 34 stmt_list: stmt_list stmt
rule 35 stmt_list: stmt
rule 36 stmt: simple_stmt ";"
rule 37 stmt: compound_stmt
rule 38 stmt: type_decl
rule 39 stmt: pointer_decl
rule 40 stmt: fn_decl
rule 41 simple_stmt: lval "=" expr
rule 42 simple_stmt: BREAK
rule 43 simple_stmt: CONTINUE
rule 44 simple_stmt: RETURN
rule 45 simple_stmt: RETURN expr
rule 46 simple_stmt: expr
rule 47 simple_stmt: pointer_decl "=" expr
rule 48 simple_stmt: lval "=" "&" expr
rule 49 compound_stmt: FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"
rule 50 compound_stmt: WHILE "(" simple_stmt ")" block
rule 51 compound_stmt: IF "(" simple_stmt ")" block optional_else
rule 52 optional_else: 
rule 53 optional_else: ELSE
rule 54 optional_else: ELSE "{" stmt_list "}"
rule 55 lval: IDENTIFIER
rule 56 lval: array_ref
rule 57 lval: pointer_decl
rule 58 expr: IDENTIFIER
rule 59 expr: INT_NUM
rule 60 expr: REAL_NUM
rule 61 expr: STRING
rule 62 expr: function_call
rule 63 expr: array_ref
rule 64 expr: expr "+" expr
rule 65 expr: expr "-" expr
rule 66 expr: expr "*" expr
rule 67 expr: expr "/" expr
rule 68 expr: expr BOOL_OP expr
rule 69 expr: expr REL_OP expr
rule 70 expr: "-" expr
rule 71 expr: "+" expr
rule 72 expr: PREFIX_OP expr
rule 73 expr: "(" expr ")"
rule 74 expr: pointer_decl
rule 75 array_ref: IDENTIFIER "[" array_index_list "]"
rule 76 array_index_list: array_index_list "]" "[" expr
rule 77 array_index_list: expr
rule 78 function_call: IDENTIFIER "(" actual_params ")"
rule 79 function_call: IDENTIFIER "(" ")"
rule 80 actual_params: actual_params "," expr
rule 81 actual_params: expr

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (38)
    on right: 
    on left : 
  target (39)
    on right: 
    on left : 1
  program (40)
    on right: 1
    on left : 2 3 4 5
  function_defs (41)
    on right: 2 3 6
    on left : 6 7
  function_def (42)
    on right: 6 7
    on left : 8
  typename (43)
    on right: 8 11 12 13 14 15 21
    on left : 17 18 19 20
  formal_params (44)
    on right: 8 9 26
    on left : 9 10
  block (45)
    on right: 8 50 51
    on left : 32 33
  formal_param (46)
    on right: 9 10
    on left : 11 12 13 14 15 16
  array_formal (47)
    on right: 14
    on left : 27
  pointer_decl (48)
    on right: 15 39 47 57 74
    on left : 24
  type_decl (49)
    on right: 38
    on left : 21
  decl_list (50)
    on right: 21 22
    on left : 22 23
  lval (51)
    on right: 22 23 41 48
    on left : 55 56 57
  fn_decl (52)
    on right: 40
    on left : 25 26
  array_formal_subs (53)
    on right: 27 28
    on left : 28 29
  array_formal_sub (54)
    on right: 28 29
    on left : 30 31
  expr (55)
    on right: 30 41 45 46 47 48 49 64 65 66 67 68 69 70 71 72 73 76 77 80 81
    on left : 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
  stmt_list (56)
    on right: 32 34 49 54
    on left : 34 35
  stmt (57)
    on right: 34 35
    on left : 36 37 38 39 40
  simple_stmt (58)
    on right: 36 49 50 51
    on left : 41 42 43 44 45 46 47 48
  compound_stmt (59)
    on right: 37
    on left : 49 50 51
  optional_else (60)
    on right: 51
    on left : 52 53 54
  array_ref (61)
    on right: 56 63
    on left : 75
  function_call (62)
    on right: 62
    on left : 78 79
  array_index_list (63)
    on right: 75 76
    on left : 76 77
  actual_params (64)
    on right: 78 80
    on left : 80 81

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  UMINUS (2) 
  UPLUS (3) 
  PREFIXOP (4) 
  "*" (5) 24 66
  "/" (6) 67
  "+" (7) 64 71
  "-" (8) 65 70
  BOOL_OP (9) 68
  REL_OP (10) 69
  type_decls (11) 3 4
  IDENTIFIER (12) 8 12 13 24 25 26 27 55 58 75 78 79
  "(" (13) 8 25 26 49 50 51 73 78 79
  ")" (14) 8 25 26 49 50 51 73 78 79
  "," (15) 9 22 80
  "&" (16) 13 48
  CHAR (17) 17
  INT (18) 18
  DOUBLE (19) 19
  VOID (20) 20
  ";" (21) 21 36 49
  "[" (22) 30 31 75 76
  "]" (23) 30 31 75 76
  "{" (24) 32 49 54
  "}" (25) 32 49 54
  "=" (26) 41 47 48
  BREAK (27) 42
  CONTINUE (28) 43
  RETURN (29) 44 45
  FOR (30) 49
  WHILE (31) 50
  IF (32) 51
  ELSE (33) 53 54
  INT_NUM (34) 59
  REAL_NUM (35) 60
  STRING (36) 61
  PREFIX_OP (37) 72

--------- State ---------

state 0


  type_decls    shift, and go to state 4
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 5 (program)

  target        go to state 1
  program       go to state 2
  function_defs  go to state 3
  function_def  go to state 5
  typename      go to state 6

state 1


  $end          shift, and go to state 11


state 2

   1) target : program _

  $default      reduce using rule 1 (target)


state 3

   2) program : function_defs _
   6) function_defs : function_defs _ function_def

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 2 (program)

  function_def  go to state 12
  typename      go to state 6

state 4

   3) program : type_decls _ function_defs
   4) program : type_decls _

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 4 (program)

  function_defs  go to state 13
  function_def  go to state 5
  typename      go to state 6

state 5

   7) function_defs : function_def _

  $default      reduce using rule 7 (function_defs)


state 6

   8) function_def : typename _ IDENTIFIER "(" formal_params ")" block

  IDENTIFIER    shift, and go to state 14


state 7

  17) typename : CHAR _

  $default      reduce using rule 17 (typename)


state 8

  18) typename : INT _

  $default      reduce using rule 18 (typename)


state 9

  19) typename : DOUBLE _

  $default      reduce using rule 19 (typename)


state 10

  20) typename : VOID _

  $default      reduce using rule 20 (typename)


state 11


  $end          shift, and go to state 15


state 12

   6) function_defs : function_defs function_def _

  $default      reduce using rule 6 (function_defs)


state 13

   3) program : type_decls function_defs _
   6) function_defs : function_defs _ function_def

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 3 (program)

  function_def  go to state 12
  typename      go to state 6

state 14

   8) function_def : typename IDENTIFIER _ "(" formal_params ")" block

  "("           shift, and go to state 16


state 15


  $default      accept


state 16

   8) function_def : typename IDENTIFIER "(" _ formal_params ")" block

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 16 (formal_param)

  formal_params  go to state 17
  formal_param  go to state 18
  typename      go to state 19

state 17

   8) function_def : typename IDENTIFIER "(" formal_params _ ")" block
   9) formal_params : formal_params _ "," formal_param

  ")"           shift, and go to state 20
  ","           shift, and go to state 21


state 18

  10) formal_params : formal_param _

  $default      reduce using rule 10 (formal_params)


state 19

  11) formal_param : typename _
  12) formal_param : typename _ IDENTIFIER
  13) formal_param : typename _ "&" IDENTIFIER
  14) formal_param : typename _ array_formal
  15) formal_param : typename _ pointer_decl

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 22
  "&"           shift, and go to state 23
  $default      reduce using rule 11 (formal_param)

  array_formal  go to state 24
  pointer_decl  go to state 25

state 20

   8) function_def : typename IDENTIFIER "(" formal_params ")" _ block

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 27

state 21

   9) formal_params : formal_params "," _ formal_param

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 16 (formal_param)

  formal_param  go to state 29
  typename      go to state 19

state 22

  12) formal_param : typename IDENTIFIER _
  27) array_formal : IDENTIFIER _ array_formal_subs

  "["           shift, and go to state 32
  $default      reduce using rule 12 (formal_param)

  array_formal_subs  go to state 30
  array_formal_sub  go to state 31

state 23

  13) formal_param : typename "&" _ IDENTIFIER

  IDENTIFIER    shift, and go to state 33


state 24

  14) formal_param : typename array_formal _

  $default      reduce using rule 14 (formal_param)


state 25

  15) formal_param : typename pointer_decl _

  $default      reduce using rule 15 (formal_param)


state 26

  24) pointer_decl : "*" _ IDENTIFIER

  IDENTIFIER    shift, and go to state 34


state 27

   8) function_def : typename IDENTIFIER "(" formal_params ")" block _

  $default      reduce using rule 8 (function_def)


state 28

  32) block : "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt_list     go to state 37
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 29

   9) formal_params : formal_params "," formal_param _

  $default      reduce using rule 9 (formal_params)


state 30

  27) array_formal : IDENTIFIER array_formal_subs _
  28) array_formal_subs : array_formal_subs _ array_formal_sub

  "["           shift, and go to state 32
  $default      reduce using rule 27 (array_formal)

  array_formal_sub  go to state 61

state 31

  29) array_formal_subs : array_formal_sub _

  $default      reduce using rule 29 (array_formal_subs)


state 32

  30) array_formal_sub : "[" _ expr "]"
  31) array_formal_sub : "[" _ "]"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  "]"           shift, and go to state 63
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  expr          go to state 62
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 33

  13) formal_param : typename "&" IDENTIFIER _

  $default      reduce using rule 13 (formal_param)


state 34

  24) pointer_decl : "*" IDENTIFIER _

  $default      reduce using rule 24 (pointer_decl)


state 35

  21) type_decl : typename _ decl_list ";"

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 69

  decl_list     go to state 67
  lval          go to state 68
  array_ref     go to state 70
  pointer_decl  go to state 71

state 36

  25) fn_decl : IDENTIFIER _ "(" ")"
  26) fn_decl : IDENTIFIER _ "(" formal_params ")"
  55) lval : IDENTIFIER _
  58) expr : IDENTIFIER _
  75) array_ref : IDENTIFIER _ "[" array_index_list "]"
  78) function_call : IDENTIFIER _ "(" actual_params ")"
  79) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 72
  "["           shift, and go to state 73
  "="           reduce using rule 55 (lval)
  $default      reduce using rule 58 (expr)


state 37

  32) block : "{" stmt_list _ "}"
  34) stmt_list : stmt_list _ stmt

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 74
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt          go to state 75
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 38

  35) stmt_list : stmt _

  $default      reduce using rule 35 (stmt_list)


state 39

  36) stmt : simple_stmt _ ";"

  ";"           shift, and go to state 76


state 40

  37) stmt : compound_stmt _

  $default      reduce using rule 37 (stmt)


state 41

  38) stmt : type_decl _

  $default      reduce using rule 38 (stmt)


state 42

  39) stmt : pointer_decl _
  47) simple_stmt : pointer_decl _ "=" expr
  57) lval : pointer_decl _
  74) expr : pointer_decl _

  "="           shift, and go to state 77
  "="           [reduce using rule 57 (lval)]
  "/"           reduce using rule 74 (expr)
  BOOL_OP       reduce using rule 74 (expr)
  REL_OP        reduce using rule 74 (expr)
  ";"           reduce using rule 74 (expr)
  "*"           [reduce using rule 74 (expr)]
  "+"           [reduce using rule 74 (expr)]
  "-"           [reduce using rule 74 (expr)]
  $default      reduce using rule 39 (stmt)


state 43

  40) stmt : fn_decl _

  $default      reduce using rule 40 (stmt)


state 44

  41) simple_stmt : lval _ "=" expr
  48) simple_stmt : lval _ "=" "&" expr

  "="           shift, and go to state 78


state 45

  42) simple_stmt : BREAK _

  $default      reduce using rule 42 (simple_stmt)


state 46

  43) simple_stmt : CONTINUE _

  $default      reduce using rule 43 (simple_stmt)


state 47

  44) simple_stmt : RETURN _
  45) simple_stmt : RETURN _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59
  $default      reduce using rule 44 (simple_stmt)

  expr          go to state 79
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 48

  46) simple_stmt : expr _
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 46 (simple_stmt)


state 49

  49) compound_stmt : FOR _ "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  "("           shift, and go to state 86


state 50

  50) compound_stmt : WHILE _ "(" simple_stmt ")" block

  "("           shift, and go to state 87


state 51

  51) compound_stmt : IF _ "(" simple_stmt ")" block optional_else

  "("           shift, and go to state 88


state 52

  56) lval : array_ref _
  63) expr : array_ref _

  "="           reduce using rule 56 (lval)
  $default      reduce using rule 63 (expr)


state 53

  59) expr : INT_NUM _

  $default      reduce using rule 59 (expr)


state 54

  60) expr : REAL_NUM _

  $default      reduce using rule 60 (expr)


state 55

  61) expr : STRING _

  $default      reduce using rule 61 (expr)


state 56

  62) expr : function_call _

  $default      reduce using rule 62 (expr)


state 57

  70) expr : "-" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 89
  pointer_decl  go to state 66

state 58

  71) expr : "+" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 90
  pointer_decl  go to state 66

state 59

  72) expr : PREFIX_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 91
  pointer_decl  go to state 66

state 60

  73) expr : "(" _ expr ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 92
  pointer_decl  go to state 66

state 61

  28) array_formal_subs : array_formal_subs array_formal_sub _

  $default      reduce using rule 28 (array_formal_subs)


state 62

  30) array_formal_sub : "[" expr _ "]"
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  "]"           shift, and go to state 93


state 63

  31) array_formal_sub : "[" "]" _

  $default      reduce using rule 31 (array_formal_sub)


state 64

  58) expr : IDENTIFIER _
  75) array_ref : IDENTIFIER _ "[" array_index_list "]"
  78) function_call : IDENTIFIER _ "(" actual_params ")"
  79) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 94
  "["           shift, and go to state 73
  $default      reduce using rule 58 (expr)


state 65

  63) expr : array_ref _

  $default      reduce using rule 63 (expr)


state 66

  74) expr : pointer_decl _

  $default      reduce using rule 74 (expr)


state 67

  21) type_decl : typename decl_list _ ";"
  22) decl_list : decl_list _ "," lval

  ","           shift, and go to state 96
  ";"           shift, and go to state 95


state 68

  23) decl_list : lval _

  $default      reduce using rule 23 (decl_list)


state 69

  55) lval : IDENTIFIER _
  75) array_ref : IDENTIFIER _ "[" array_index_list "]"

  "["           shift, and go to state 73
  $default      reduce using rule 55 (lval)


state 70

  56) lval : array_ref _

  $default      reduce using rule 56 (lval)


state 71

  57) lval : pointer_decl _

  $default      reduce using rule 57 (lval)


state 72

  25) fn_decl : IDENTIFIER "(" _ ")"
  26) fn_decl : IDENTIFIER "(" _ formal_params ")"
  78) function_call : IDENTIFIER "(" _ actual_params ")"
  79) function_call : IDENTIFIER "(" _ ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  ")"           shift, and go to state 98
  ")"           [reduce using rule 16 (formal_param)]
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59
  $default      reduce using rule 16 (formal_param)

  formal_params  go to state 97
  formal_param  go to state 18
  typename      go to state 19
  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 99
  pointer_decl  go to state 66
  actual_params  go to state 100

state 73

  75) array_ref : IDENTIFIER "[" _ array_index_list "]"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 101
  pointer_decl  go to state 66
  array_index_list  go to state 102

state 74

  32) block : "{" stmt_list "}" _

  $default      reduce using rule 32 (block)


state 75

  34) stmt_list : stmt_list stmt _

  $default      reduce using rule 34 (stmt_list)


state 76

  36) stmt : simple_stmt ";" _

  $default      reduce using rule 36 (stmt)


state 77

  47) simple_stmt : pointer_decl "=" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  expr          go to state 103
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 78

  41) simple_stmt : lval "=" _ expr
  48) simple_stmt : lval "=" _ "&" expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  "&"           shift, and go to state 105
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  expr          go to state 104
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 79

  45) simple_stmt : RETURN expr _
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 45 (simple_stmt)


state 80

  64) expr : expr "+" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 106
  pointer_decl  go to state 66

state 81

  65) expr : expr "-" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 107
  pointer_decl  go to state 66

state 82

  66) expr : expr "*" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 108
  pointer_decl  go to state 66

state 83

  67) expr : expr "/" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 109
  pointer_decl  go to state 66

state 84

  68) expr : expr BOOL_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 110
  pointer_decl  go to state 66

state 85

  69) expr : expr REL_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 111
  pointer_decl  go to state 66

state 86

  49) compound_stmt : FOR "(" _ simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 114
  "("           shift, and go to state 60
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  lval          go to state 44
  expr          go to state 48
  pointer_decl  go to state 112
  simple_stmt   go to state 113
  array_ref     go to state 52
  function_call  go to state 56

state 87

  50) compound_stmt : WHILE "(" _ simple_stmt ")" block

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 114
  "("           shift, and go to state 60
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  lval          go to state 44
  expr          go to state 48
  pointer_decl  go to state 112
  simple_stmt   go to state 115
  array_ref     go to state 52
  function_call  go to state 56

state 88

  51) compound_stmt : IF "(" _ simple_stmt ")" block optional_else

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 114
  "("           shift, and go to state 60
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  lval          go to state 44
  expr          go to state 48
  pointer_decl  go to state 112
  simple_stmt   go to state 116
  array_ref     go to state 52
  function_call  go to state 56

state 89

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  70) expr : "-" expr _

  $default      reduce using rule 70 (expr)


state 90

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  71) expr : "+" expr _

  $default      reduce using rule 71 (expr)


state 91

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  72) expr : PREFIX_OP expr _

  $default      reduce using rule 72 (expr)


state 92

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  73) expr : "(" expr _ ")"

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  ")"           shift, and go to state 117


state 93

  30) array_formal_sub : "[" expr "]" _

  $default      reduce using rule 30 (array_formal_sub)


state 94

  78) function_call : IDENTIFIER "(" _ actual_params ")"
  79) function_call : IDENTIFIER "(" _ ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  ")"           shift, and go to state 118
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 99
  pointer_decl  go to state 66
  actual_params  go to state 100

state 95

  21) type_decl : typename decl_list ";" _

  $default      reduce using rule 21 (type_decl)


state 96

  22) decl_list : decl_list "," _ lval

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 69

  lval          go to state 119
  array_ref     go to state 70
  pointer_decl  go to state 71

state 97

   9) formal_params : formal_params _ "," formal_param
  26) fn_decl : IDENTIFIER "(" formal_params _ ")"

  ")"           shift, and go to state 120
  ","           shift, and go to state 21


state 98

  25) fn_decl : IDENTIFIER "(" ")" _
  79) function_call : IDENTIFIER "(" ")" _

  "/"           reduce using rule 79 (function_call)
  BOOL_OP       reduce using rule 79 (function_call)
  REL_OP        reduce using rule 79 (function_call)
  ";"           reduce using rule 79 (function_call)
  "*"           [reduce using rule 79 (function_call)]
  "+"           [reduce using rule 79 (function_call)]
  "-"           [reduce using rule 79 (function_call)]
  $default      reduce using rule 25 (fn_decl)


state 99

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  81) actual_params : expr _

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 81 (actual_params)


state 100

  78) function_call : IDENTIFIER "(" actual_params _ ")"
  80) actual_params : actual_params _ "," expr

  ")"           shift, and go to state 121
  ","           shift, and go to state 122


state 101

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  77) array_index_list : expr _

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 77 (array_index_list)


state 102

  75) array_ref : IDENTIFIER "[" array_index_list _ "]"
  76) array_index_list : array_index_list _ "]" "[" expr

  "]"           shift, and go to state 123


state 103

  47) simple_stmt : pointer_decl "=" expr _
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 47 (simple_stmt)


state 104

  41) simple_stmt : lval "=" expr _
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 41 (simple_stmt)


state 105

  48) simple_stmt : lval "=" "&" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  expr          go to state 124
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 106

  64) expr : expr _ "+" expr
  64) expr : expr "+" expr _
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  $default      reduce using rule 64 (expr)


state 107

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  65) expr : expr "-" expr _
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  $default      reduce using rule 65 (expr)


state 108

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  66) expr : expr "*" expr _
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  $default      reduce using rule 66 (expr)


state 109

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  67) expr : expr "/" expr _
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  $default      reduce using rule 67 (expr)


state 110

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  68) expr : expr BOOL_OP expr _
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  $default      reduce using rule 68 (expr)


state 111

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  69) expr : expr REL_OP expr _

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  $default      reduce using rule 69 (expr)


state 112

  47) simple_stmt : pointer_decl _ "=" expr
  57) lval : pointer_decl _
  74) expr : pointer_decl _

  "="           shift, and go to state 77
  "="           [reduce using rule 57 (lval)]
  $default      reduce using rule 74 (expr)


state 113

  49) compound_stmt : FOR "(" simple_stmt _ ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  ";"           shift, and go to state 125


state 114

  55) lval : IDENTIFIER _
  58) expr : IDENTIFIER _
  75) array_ref : IDENTIFIER _ "[" array_index_list "]"
  78) function_call : IDENTIFIER _ "(" actual_params ")"
  79) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 94
  "["           shift, and go to state 73
  "="           reduce using rule 55 (lval)
  $default      reduce using rule 58 (expr)


state 115

  50) compound_stmt : WHILE "(" simple_stmt _ ")" block

  ")"           shift, and go to state 126


state 116

  51) compound_stmt : IF "(" simple_stmt _ ")" block optional_else

  ")"           shift, and go to state 127


state 117

  73) expr : "(" expr ")" _

  $default      reduce using rule 73 (expr)


state 118

  79) function_call : IDENTIFIER "(" ")" _

  $default      reduce using rule 79 (function_call)


state 119

  22) decl_list : decl_list "," lval _

  $default      reduce using rule 22 (decl_list)


state 120

  26) fn_decl : IDENTIFIER "(" formal_params ")" _

  $default      reduce using rule 26 (fn_decl)


state 121

  78) function_call : IDENTIFIER "(" actual_params ")" _

  $default      reduce using rule 78 (function_call)


state 122

  80) actual_params : actual_params "," _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 128
  pointer_decl  go to state 66

state 123

  75) array_ref : IDENTIFIER "[" array_index_list "]" _
  76) array_index_list : array_index_list "]" _ "[" expr

  "["           shift, and go to state 129
  $default      reduce using rule 75 (array_ref)


state 124

  48) simple_stmt : lval "=" "&" expr _
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 48 (simple_stmt)


state 125

  49) compound_stmt : FOR "(" simple_stmt ";" _ expr ";" simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  expr          go to state 130
  function_call  go to state 56
  array_ref     go to state 65
  pointer_decl  go to state 66

state 126

  50) compound_stmt : WHILE "(" simple_stmt ")" _ block

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 131

state 127

  51) compound_stmt : IF "(" simple_stmt ")" _ block optional_else

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 132

state 128

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  80) actual_params : actual_params "," expr _

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 80 (actual_params)


state 129

  76) array_index_list : array_index_list "]" "[" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 64
  "("           shift, and go to state 60
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  function_call  go to state 56
  array_ref     go to state 65
  expr          go to state 133
  pointer_decl  go to state 66

state 130

  49) compound_stmt : FOR "(" simple_stmt ";" expr _ ";" simple_stmt ")" "{" stmt_list "}"
  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  ";"           shift, and go to state 134


state 131

  50) compound_stmt : WHILE "(" simple_stmt ")" block _

  $default      reduce using rule 50 (compound_stmt)


state 132

  51) compound_stmt : IF "(" simple_stmt ")" block _ optional_else

  ELSE          shift, and go to state 136
  $default      reduce using rule 52 (optional_else)

  optional_else  go to state 135

state 133

  64) expr : expr _ "+" expr
  65) expr : expr _ "-" expr
  66) expr : expr _ "*" expr
  67) expr : expr _ "/" expr
  68) expr : expr _ BOOL_OP expr
  69) expr : expr _ REL_OP expr
  76) array_index_list : array_index_list "]" "[" expr _

  "*"           shift, and go to state 82
  "/"           shift, and go to state 83
  "+"           shift, and go to state 80
  "-"           shift, and go to state 81
  BOOL_OP       shift, and go to state 84
  REL_OP        shift, and go to state 85
  $default      reduce using rule 76 (array_index_list)


state 134

  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" _ simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 114
  "("           shift, and go to state 60
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  lval          go to state 44
  expr          go to state 48
  pointer_decl  go to state 112
  simple_stmt   go to state 137
  array_ref     go to state 52
  function_call  go to state 56

state 135

  51) compound_stmt : IF "(" simple_stmt ")" block optional_else _

  $default      reduce using rule 51 (compound_stmt)


state 136

  53) optional_else : ELSE _
  54) optional_else : ELSE _ "{" stmt_list "}"

  "{"           shift, and go to state 138
  $default      reduce using rule 53 (optional_else)


state 137

  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt _ ")" "{" stmt_list "}"

  ")"           shift, and go to state 139


state 138

  54) optional_else : ELSE "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt_list     go to state 140
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 139

  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" _ "{" stmt_list "}"

  "{"           shift, and go to state 141


state 140

  34) stmt_list : stmt_list _ stmt
  54) optional_else : ELSE "{" stmt_list _ "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 142
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt          go to state 75
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 141

  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt_list     go to state 143
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 142

  54) optional_else : ELSE "{" stmt_list "}" _

  $default      reduce using rule 54 (optional_else)


state 143

  34) stmt_list : stmt_list _ stmt
  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list _ "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 58
  "-"           shift, and go to state 57
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 60
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 144
  BREAK         shift, and go to state 45
  CONTINUE      shift, and go to state 46
  RETURN        shift, and go to state 47
  FOR           shift, and go to state 49
  WHILE         shift, and go to state 50
  IF            shift, and go to state 51
  INT_NUM       shift, and go to state 53
  REAL_NUM      shift, and go to state 54
  STRING        shift, and go to state 55
  PREFIX_OP     shift, and go to state 59

  typename      go to state 35
  stmt          go to state 75
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 44
  expr          go to state 48
  array_ref     go to state 52
  function_call  go to state 56

state 144

  49) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}" _

  $default      reduce using rule 49 (compound_stmt)

