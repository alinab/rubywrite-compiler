state 42 contains 1 shift/reduce conflicts
state 42 contains 3 reduce/reduce conflicts
state 73 contains 1 shift/reduce conflicts
state 73 contains 2 reduce/reduce conflicts
state 96 contains 1 shift/reduce conflicts
state 100 contains 3 reduce/reduce conflicts
state 115 contains 1 shift/reduce conflicts


-------- Grammar --------

rule 1 target: program
rule 2 program: function_defs
rule 3 program: type_decls function_defs
rule 4 program: type_decls
rule 5 program: 
rule 6 function_defs: function_defs function_def
rule 7 function_defs: function_def
rule 8 function_def: typename IDENTIFIER "(" formal_params ")" block
rule 9 formal_params: formal_params "," formal_param
rule 10 formal_params: formal_param
rule 11 formal_param: typename
rule 12 formal_param: typename IDENTIFIER
rule 13 formal_param: typename "&" IDENTIFIER
rule 14 formal_param: typename array_formal
rule 15 formal_param: typename pointer_decl
rule 16 formal_param: 
rule 17 typename: CHAR
rule 18 typename: INT
rule 19 typename: DOUBLE
rule 20 typename: VOID
rule 21 type_decl: typename decl_list ";"
rule 22 decl_list: decl_list "," lval
rule 23 decl_list: lval
rule 24 pointer_decl: "*" IDENTIFIER
rule 25 fn_decl: IDENTIFIER "(" ")"
rule 26 fn_decl: IDENTIFIER "(" formal_params ")"
rule 27 array_formal: IDENTIFIER array_formal_subs
rule 28 array_formal_subs: array_formal_subs array_formal_sub
rule 29 array_formal_subs: array_formal_sub
rule 30 array_formal_sub: "[" expr "]"
rule 31 array_formal_sub: "[" "]"
rule 32 block: "{" stmt_list "}"
rule 33 block: 
rule 34 stmt_list: stmt_list stmt
rule 35 stmt_list: stmt
rule 36 stmt: simple_stmt ";"
rule 37 stmt: compound_stmt
rule 38 stmt: type_decl
rule 39 stmt: pointer_decl
rule 40 stmt: fn_decl
rule 41 stmt: PRAGMA OMP PARALLEL "{" stmt_list "}"
rule 42 simple_stmt: lval "=" expr
rule 43 simple_stmt: BREAK
rule 44 simple_stmt: CONTINUE
rule 45 simple_stmt: RETURN
rule 46 simple_stmt: RETURN expr
rule 47 simple_stmt: expr
rule 48 simple_stmt: pointer_decl "=" expr
rule 49 simple_stmt: lval "=" "&" expr
rule 50 compound_stmt: FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"
rule 51 compound_stmt: WHILE "(" simple_stmt ")" block
rule 52 compound_stmt: IF "(" simple_stmt ")" block optional_else
rule 53 optional_else: 
rule 54 optional_else: ELSE
rule 55 optional_else: ELSE "{" stmt_list "}"
rule 56 lval: IDENTIFIER
rule 57 lval: array_ref
rule 58 lval: pointer_decl
rule 59 expr: IDENTIFIER
rule 60 expr: INT_NUM
rule 61 expr: REAL_NUM
rule 62 expr: STRING
rule 63 expr: function_call
rule 64 expr: array_ref
rule 65 expr: expr "+" expr
rule 66 expr: expr "-" expr
rule 67 expr: expr "*" expr
rule 68 expr: expr "/" expr
rule 69 expr: expr BOOL_OP expr
rule 70 expr: expr REL_OP expr
rule 71 expr: "-" expr
rule 72 expr: "+" expr
rule 73 expr: PREFIX_OP expr
rule 74 expr: "(" expr ")"
rule 75 expr: pointer_decl
rule 76 array_ref: IDENTIFIER "[" array_index_list "]"
rule 77 array_index_list: array_index_list "]" "[" expr
rule 78 array_index_list: expr
rule 79 function_call: IDENTIFIER "(" actual_params ")"
rule 80 function_call: IDENTIFIER "(" ")"
rule 81 actual_params: actual_params "," expr
rule 82 actual_params: expr
rule 83 actual_params: 

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (41)
    on right: 
    on left : 
  target (42)
    on right: 
    on left : 1
  program (43)
    on right: 1
    on left : 2 3 4 5
  function_defs (44)
    on right: 2 3 6
    on left : 6 7
  function_def (45)
    on right: 6 7
    on left : 8
  typename (46)
    on right: 8 11 12 13 14 15 21
    on left : 17 18 19 20
  formal_params (47)
    on right: 8 9 26
    on left : 9 10
  block (48)
    on right: 8 51 52
    on left : 32 33
  formal_param (49)
    on right: 9 10
    on left : 11 12 13 14 15 16
  array_formal (50)
    on right: 14
    on left : 27
  pointer_decl (51)
    on right: 15 39 48 58 75
    on left : 24
  type_decl (52)
    on right: 38
    on left : 21
  decl_list (53)
    on right: 21 22
    on left : 22 23
  lval (54)
    on right: 22 23 42 49
    on left : 56 57 58
  fn_decl (55)
    on right: 40
    on left : 25 26
  array_formal_subs (56)
    on right: 27 28
    on left : 28 29
  array_formal_sub (57)
    on right: 28 29
    on left : 30 31
  expr (58)
    on right: 30 42 46 47 48 49 50 65 66 67 68 69 70 71 72 73 74 77 78 81 82
    on left : 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
  stmt_list (59)
    on right: 32 34 41 50 55
    on left : 34 35
  stmt (60)
    on right: 34 35
    on left : 36 37 38 39 40 41
  simple_stmt (61)
    on right: 36 50 51 52
    on left : 42 43 44 45 46 47 48 49
  compound_stmt (62)
    on right: 37
    on left : 50 51 52
  optional_else (63)
    on right: 52
    on left : 53 54 55
  array_ref (64)
    on right: 57 64
    on left : 76
  function_call (65)
    on right: 63
    on left : 79 80
  array_index_list (66)
    on right: 76 77
    on left : 77 78
  actual_params (67)
    on right: 79 81
    on left : 81 82 83

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  UMINUS (2) 
  UPLUS (3) 
  PREFIXOP (4) 
  "*" (5) 24 67
  "/" (6) 68
  "+" (7) 65 72
  "-" (8) 66 71
  BOOL_OP (9) 69
  REL_OP (10) 70
  type_decls (11) 3 4
  IDENTIFIER (12) 8 12 13 24 25 26 27 56 59 76 79 80
  "(" (13) 8 25 26 50 51 52 74 79 80
  ")" (14) 8 25 26 50 51 52 74 79 80
  "," (15) 9 22 81
  "&" (16) 13 49
  CHAR (17) 17
  INT (18) 18
  DOUBLE (19) 19
  VOID (20) 20
  ";" (21) 21 36 50
  "[" (22) 30 31 76 77
  "]" (23) 30 31 76 77
  "{" (24) 32 41 50 55
  "}" (25) 32 41 50 55
  PRAGMA (26) 41
  OMP (27) 41
  PARALLEL (28) 41
  "=" (29) 42 48 49
  BREAK (30) 43
  CONTINUE (31) 44
  RETURN (32) 45 46
  FOR (33) 50
  WHILE (34) 51
  IF (35) 52
  ELSE (36) 54 55
  INT_NUM (37) 60
  REAL_NUM (38) 61
  STRING (39) 62
  PREFIX_OP (40) 73

--------- State ---------

state 0


  type_decls    shift, and go to state 4
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 5 (program)

  target        go to state 1
  program       go to state 2
  function_defs  go to state 3
  function_def  go to state 5
  typename      go to state 6

state 1


  $end          shift, and go to state 11


state 2

   1) target : program _

  $default      reduce using rule 1 (target)


state 3

   2) program : function_defs _
   6) function_defs : function_defs _ function_def

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 2 (program)

  function_def  go to state 12
  typename      go to state 6

state 4

   3) program : type_decls _ function_defs
   4) program : type_decls _

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 4 (program)

  function_defs  go to state 13
  function_def  go to state 5
  typename      go to state 6

state 5

   7) function_defs : function_def _

  $default      reduce using rule 7 (function_defs)


state 6

   8) function_def : typename _ IDENTIFIER "(" formal_params ")" block

  IDENTIFIER    shift, and go to state 14


state 7

  17) typename : CHAR _

  $default      reduce using rule 17 (typename)


state 8

  18) typename : INT _

  $default      reduce using rule 18 (typename)


state 9

  19) typename : DOUBLE _

  $default      reduce using rule 19 (typename)


state 10

  20) typename : VOID _

  $default      reduce using rule 20 (typename)


state 11


  $end          shift, and go to state 15


state 12

   6) function_defs : function_defs function_def _

  $default      reduce using rule 6 (function_defs)


state 13

   3) program : type_decls function_defs _
   6) function_defs : function_defs _ function_def

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 3 (program)

  function_def  go to state 12
  typename      go to state 6

state 14

   8) function_def : typename IDENTIFIER _ "(" formal_params ")" block

  "("           shift, and go to state 16


state 15


  $default      accept


state 16

   8) function_def : typename IDENTIFIER "(" _ formal_params ")" block

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 16 (formal_param)

  formal_params  go to state 17
  formal_param  go to state 18
  typename      go to state 19

state 17

   8) function_def : typename IDENTIFIER "(" formal_params _ ")" block
   9) formal_params : formal_params _ "," formal_param

  ")"           shift, and go to state 20
  ","           shift, and go to state 21


state 18

  10) formal_params : formal_param _

  $default      reduce using rule 10 (formal_params)


state 19

  11) formal_param : typename _
  12) formal_param : typename _ IDENTIFIER
  13) formal_param : typename _ "&" IDENTIFIER
  14) formal_param : typename _ array_formal
  15) formal_param : typename _ pointer_decl

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 22
  "&"           shift, and go to state 23
  $default      reduce using rule 11 (formal_param)

  array_formal  go to state 24
  pointer_decl  go to state 25

state 20

   8) function_def : typename IDENTIFIER "(" formal_params ")" _ block

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 27

state 21

   9) formal_params : formal_params "," _ formal_param

  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  $default      reduce using rule 16 (formal_param)

  formal_param  go to state 29
  typename      go to state 19

state 22

  12) formal_param : typename IDENTIFIER _
  27) array_formal : IDENTIFIER _ array_formal_subs

  "["           shift, and go to state 32
  $default      reduce using rule 12 (formal_param)

  array_formal_subs  go to state 30
  array_formal_sub  go to state 31

state 23

  13) formal_param : typename "&" _ IDENTIFIER

  IDENTIFIER    shift, and go to state 33


state 24

  14) formal_param : typename array_formal _

  $default      reduce using rule 14 (formal_param)


state 25

  15) formal_param : typename pointer_decl _

  $default      reduce using rule 15 (formal_param)


state 26

  24) pointer_decl : "*" _ IDENTIFIER

  IDENTIFIER    shift, and go to state 34


state 27

   8) function_def : typename IDENTIFIER "(" formal_params ")" block _

  $default      reduce using rule 8 (function_def)


state 28

  32) block : "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt_list     go to state 37
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 29

   9) formal_params : formal_params "," formal_param _

  $default      reduce using rule 9 (formal_params)


state 30

  27) array_formal : IDENTIFIER array_formal_subs _
  28) array_formal_subs : array_formal_subs _ array_formal_sub

  "["           shift, and go to state 32
  $default      reduce using rule 27 (array_formal)

  array_formal_sub  go to state 62

state 31

  29) array_formal_subs : array_formal_sub _

  $default      reduce using rule 29 (array_formal_subs)


state 32

  30) array_formal_sub : "[" _ expr "]"
  31) array_formal_sub : "[" _ "]"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  "]"           shift, and go to state 64
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  expr          go to state 63
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 33

  13) formal_param : typename "&" IDENTIFIER _

  $default      reduce using rule 13 (formal_param)


state 34

  24) pointer_decl : "*" IDENTIFIER _

  $default      reduce using rule 24 (pointer_decl)


state 35

  21) type_decl : typename _ decl_list ";"

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 70

  decl_list     go to state 68
  lval          go to state 69
  array_ref     go to state 71
  pointer_decl  go to state 72

state 36

  25) fn_decl : IDENTIFIER _ "(" ")"
  26) fn_decl : IDENTIFIER _ "(" formal_params ")"
  56) lval : IDENTIFIER _
  59) expr : IDENTIFIER _
  76) array_ref : IDENTIFIER _ "[" array_index_list "]"
  79) function_call : IDENTIFIER _ "(" actual_params ")"
  80) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 73
  "["           shift, and go to state 74
  "="           reduce using rule 56 (lval)
  $default      reduce using rule 59 (expr)


state 37

  32) block : "{" stmt_list _ "}"
  34) stmt_list : stmt_list _ stmt

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 75
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt          go to state 76
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 38

  35) stmt_list : stmt _

  $default      reduce using rule 35 (stmt_list)


state 39

  36) stmt : simple_stmt _ ";"

  ";"           shift, and go to state 77


state 40

  37) stmt : compound_stmt _

  $default      reduce using rule 37 (stmt)


state 41

  38) stmt : type_decl _

  $default      reduce using rule 38 (stmt)


state 42

  39) stmt : pointer_decl _
  48) simple_stmt : pointer_decl _ "=" expr
  58) lval : pointer_decl _
  75) expr : pointer_decl _

  "="           shift, and go to state 78
  "="           [reduce using rule 58 (lval)]
  "/"           reduce using rule 75 (expr)
  BOOL_OP       reduce using rule 75 (expr)
  REL_OP        reduce using rule 75 (expr)
  ";"           reduce using rule 75 (expr)
  "*"           [reduce using rule 75 (expr)]
  "+"           [reduce using rule 75 (expr)]
  "-"           [reduce using rule 75 (expr)]
  $default      reduce using rule 39 (stmt)


state 43

  40) stmt : fn_decl _

  $default      reduce using rule 40 (stmt)


state 44

  41) stmt : PRAGMA _ OMP PARALLEL "{" stmt_list "}"

  OMP           shift, and go to state 79


state 45

  42) simple_stmt : lval _ "=" expr
  49) simple_stmt : lval _ "=" "&" expr

  "="           shift, and go to state 80


state 46

  43) simple_stmt : BREAK _

  $default      reduce using rule 43 (simple_stmt)


state 47

  44) simple_stmt : CONTINUE _

  $default      reduce using rule 44 (simple_stmt)


state 48

  45) simple_stmt : RETURN _
  46) simple_stmt : RETURN _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60
  $default      reduce using rule 45 (simple_stmt)

  expr          go to state 81
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 49

  47) simple_stmt : expr _
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 47 (simple_stmt)


state 50

  50) compound_stmt : FOR _ "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  "("           shift, and go to state 88


state 51

  51) compound_stmt : WHILE _ "(" simple_stmt ")" block

  "("           shift, and go to state 89


state 52

  52) compound_stmt : IF _ "(" simple_stmt ")" block optional_else

  "("           shift, and go to state 90


state 53

  57) lval : array_ref _
  64) expr : array_ref _

  "="           reduce using rule 57 (lval)
  $default      reduce using rule 64 (expr)


state 54

  60) expr : INT_NUM _

  $default      reduce using rule 60 (expr)


state 55

  61) expr : REAL_NUM _

  $default      reduce using rule 61 (expr)


state 56

  62) expr : STRING _

  $default      reduce using rule 62 (expr)


state 57

  63) expr : function_call _

  $default      reduce using rule 63 (expr)


state 58

  71) expr : "-" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 91
  pointer_decl  go to state 67

state 59

  72) expr : "+" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 92
  pointer_decl  go to state 67

state 60

  73) expr : PREFIX_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 93
  pointer_decl  go to state 67

state 61

  74) expr : "(" _ expr ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 94
  pointer_decl  go to state 67

state 62

  28) array_formal_subs : array_formal_subs array_formal_sub _

  $default      reduce using rule 28 (array_formal_subs)


state 63

  30) array_formal_sub : "[" expr _ "]"
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  "]"           shift, and go to state 95


state 64

  31) array_formal_sub : "[" "]" _

  $default      reduce using rule 31 (array_formal_sub)


state 65

  59) expr : IDENTIFIER _
  76) array_ref : IDENTIFIER _ "[" array_index_list "]"
  79) function_call : IDENTIFIER _ "(" actual_params ")"
  80) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 96
  "["           shift, and go to state 74
  $default      reduce using rule 59 (expr)


state 66

  64) expr : array_ref _

  $default      reduce using rule 64 (expr)


state 67

  75) expr : pointer_decl _

  $default      reduce using rule 75 (expr)


state 68

  21) type_decl : typename decl_list _ ";"
  22) decl_list : decl_list _ "," lval

  ","           shift, and go to state 98
  ";"           shift, and go to state 97


state 69

  23) decl_list : lval _

  $default      reduce using rule 23 (decl_list)


state 70

  56) lval : IDENTIFIER _
  76) array_ref : IDENTIFIER _ "[" array_index_list "]"

  "["           shift, and go to state 74
  $default      reduce using rule 56 (lval)


state 71

  57) lval : array_ref _

  $default      reduce using rule 57 (lval)


state 72

  58) lval : pointer_decl _

  $default      reduce using rule 58 (lval)


state 73

  25) fn_decl : IDENTIFIER "(" _ ")"
  26) fn_decl : IDENTIFIER "(" _ formal_params ")"
  79) function_call : IDENTIFIER "(" _ actual_params ")"
  80) function_call : IDENTIFIER "(" _ ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  ")"           shift, and go to state 100
  ")"           [reduce using rule 16 (formal_param)]
  ")"           [reduce using rule 83 (actual_params)]
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60
  ","           [reduce using rule 83 (actual_params)]
  $default      reduce using rule 16 (formal_param)

  formal_params  go to state 99
  formal_param  go to state 18
  typename      go to state 19
  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 101
  pointer_decl  go to state 67
  actual_params  go to state 102

state 74

  76) array_ref : IDENTIFIER "[" _ array_index_list "]"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 103
  pointer_decl  go to state 67
  array_index_list  go to state 104

state 75

  32) block : "{" stmt_list "}" _

  $default      reduce using rule 32 (block)


state 76

  34) stmt_list : stmt_list stmt _

  $default      reduce using rule 34 (stmt_list)


state 77

  36) stmt : simple_stmt ";" _

  $default      reduce using rule 36 (stmt)


state 78

  48) simple_stmt : pointer_decl "=" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  expr          go to state 105
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 79

  41) stmt : PRAGMA OMP _ PARALLEL "{" stmt_list "}"

  PARALLEL      shift, and go to state 106


state 80

  42) simple_stmt : lval "=" _ expr
  49) simple_stmt : lval "=" _ "&" expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  "&"           shift, and go to state 108
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  expr          go to state 107
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 81

  46) simple_stmt : RETURN expr _
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 46 (simple_stmt)


state 82

  65) expr : expr "+" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 109
  pointer_decl  go to state 67

state 83

  66) expr : expr "-" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 110
  pointer_decl  go to state 67

state 84

  67) expr : expr "*" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 111
  pointer_decl  go to state 67

state 85

  68) expr : expr "/" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 112
  pointer_decl  go to state 67

state 86

  69) expr : expr BOOL_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 113
  pointer_decl  go to state 67

state 87

  70) expr : expr REL_OP _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 114
  pointer_decl  go to state 67

state 88

  50) compound_stmt : FOR "(" _ simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 117
  "("           shift, and go to state 61
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  lval          go to state 45
  expr          go to state 49
  pointer_decl  go to state 115
  simple_stmt   go to state 116
  array_ref     go to state 53
  function_call  go to state 57

state 89

  51) compound_stmt : WHILE "(" _ simple_stmt ")" block

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 117
  "("           shift, and go to state 61
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  lval          go to state 45
  expr          go to state 49
  pointer_decl  go to state 115
  simple_stmt   go to state 118
  array_ref     go to state 53
  function_call  go to state 57

state 90

  52) compound_stmt : IF "(" _ simple_stmt ")" block optional_else

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 117
  "("           shift, and go to state 61
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  lval          go to state 45
  expr          go to state 49
  pointer_decl  go to state 115
  simple_stmt   go to state 119
  array_ref     go to state 53
  function_call  go to state 57

state 91

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  71) expr : "-" expr _

  $default      reduce using rule 71 (expr)


state 92

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  72) expr : "+" expr _

  $default      reduce using rule 72 (expr)


state 93

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  73) expr : PREFIX_OP expr _

  $default      reduce using rule 73 (expr)


state 94

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  74) expr : "(" expr _ ")"

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  ")"           shift, and go to state 120


state 95

  30) array_formal_sub : "[" expr "]" _

  $default      reduce using rule 30 (array_formal_sub)


state 96

  79) function_call : IDENTIFIER "(" _ actual_params ")"
  80) function_call : IDENTIFIER "(" _ ")"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  ")"           shift, and go to state 121
  ")"           [reduce using rule 83 (actual_params)]
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60
  $default      reduce using rule 83 (actual_params)

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 101
  pointer_decl  go to state 67
  actual_params  go to state 102

state 97

  21) type_decl : typename decl_list ";" _

  $default      reduce using rule 21 (type_decl)


state 98

  22) decl_list : decl_list "," _ lval

  "*"           shift, and go to state 26
  IDENTIFIER    shift, and go to state 70

  lval          go to state 122
  array_ref     go to state 71
  pointer_decl  go to state 72

state 99

   9) formal_params : formal_params _ "," formal_param
  26) fn_decl : IDENTIFIER "(" formal_params _ ")"

  ")"           shift, and go to state 123
  ","           shift, and go to state 21


state 100

  25) fn_decl : IDENTIFIER "(" ")" _
  80) function_call : IDENTIFIER "(" ")" _

  "/"           reduce using rule 80 (function_call)
  BOOL_OP       reduce using rule 80 (function_call)
  REL_OP        reduce using rule 80 (function_call)
  ";"           reduce using rule 80 (function_call)
  "*"           [reduce using rule 80 (function_call)]
  "+"           [reduce using rule 80 (function_call)]
  "-"           [reduce using rule 80 (function_call)]
  $default      reduce using rule 25 (fn_decl)


state 101

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  82) actual_params : expr _

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 82 (actual_params)


state 102

  79) function_call : IDENTIFIER "(" actual_params _ ")"
  81) actual_params : actual_params _ "," expr

  ")"           shift, and go to state 124
  ","           shift, and go to state 125


state 103

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  78) array_index_list : expr _

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 78 (array_index_list)


state 104

  76) array_ref : IDENTIFIER "[" array_index_list _ "]"
  77) array_index_list : array_index_list _ "]" "[" expr

  "]"           shift, and go to state 126


state 105

  48) simple_stmt : pointer_decl "=" expr _
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 48 (simple_stmt)


state 106

  41) stmt : PRAGMA OMP PARALLEL _ "{" stmt_list "}"

  "{"           shift, and go to state 127


state 107

  42) simple_stmt : lval "=" expr _
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 42 (simple_stmt)


state 108

  49) simple_stmt : lval "=" "&" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  expr          go to state 128
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 109

  65) expr : expr _ "+" expr
  65) expr : expr "+" expr _
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  $default      reduce using rule 65 (expr)


state 110

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  66) expr : expr "-" expr _
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  $default      reduce using rule 66 (expr)


state 111

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  67) expr : expr "*" expr _
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  $default      reduce using rule 67 (expr)


state 112

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  68) expr : expr "/" expr _
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  $default      reduce using rule 68 (expr)


state 113

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  69) expr : expr BOOL_OP expr _
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  $default      reduce using rule 69 (expr)


state 114

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  70) expr : expr REL_OP expr _

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  $default      reduce using rule 70 (expr)


state 115

  48) simple_stmt : pointer_decl _ "=" expr
  58) lval : pointer_decl _
  75) expr : pointer_decl _

  "="           shift, and go to state 78
  "="           [reduce using rule 58 (lval)]
  $default      reduce using rule 75 (expr)


state 116

  50) compound_stmt : FOR "(" simple_stmt _ ";" expr ";" simple_stmt ")" "{" stmt_list "}"

  ";"           shift, and go to state 129


state 117

  56) lval : IDENTIFIER _
  59) expr : IDENTIFIER _
  76) array_ref : IDENTIFIER _ "[" array_index_list "]"
  79) function_call : IDENTIFIER _ "(" actual_params ")"
  80) function_call : IDENTIFIER _ "(" ")"

  "("           shift, and go to state 96
  "["           shift, and go to state 74
  "="           reduce using rule 56 (lval)
  $default      reduce using rule 59 (expr)


state 118

  51) compound_stmt : WHILE "(" simple_stmt _ ")" block

  ")"           shift, and go to state 130


state 119

  52) compound_stmt : IF "(" simple_stmt _ ")" block optional_else

  ")"           shift, and go to state 131


state 120

  74) expr : "(" expr ")" _

  $default      reduce using rule 74 (expr)


state 121

  80) function_call : IDENTIFIER "(" ")" _

  $default      reduce using rule 80 (function_call)


state 122

  22) decl_list : decl_list "," lval _

  $default      reduce using rule 22 (decl_list)


state 123

  26) fn_decl : IDENTIFIER "(" formal_params ")" _

  $default      reduce using rule 26 (fn_decl)


state 124

  79) function_call : IDENTIFIER "(" actual_params ")" _

  $default      reduce using rule 79 (function_call)


state 125

  81) actual_params : actual_params "," _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 132
  pointer_decl  go to state 67

state 126

  76) array_ref : IDENTIFIER "[" array_index_list "]" _
  77) array_index_list : array_index_list "]" _ "[" expr

  "["           shift, and go to state 133
  $default      reduce using rule 76 (array_ref)


state 127

  41) stmt : PRAGMA OMP PARALLEL "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt_list     go to state 134
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 128

  49) simple_stmt : lval "=" "&" expr _
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 49 (simple_stmt)


state 129

  50) compound_stmt : FOR "(" simple_stmt ";" _ expr ";" simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  expr          go to state 135
  function_call  go to state 57
  array_ref     go to state 66
  pointer_decl  go to state 67

state 130

  51) compound_stmt : WHILE "(" simple_stmt ")" _ block

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 136

state 131

  52) compound_stmt : IF "(" simple_stmt ")" _ block optional_else

  "{"           shift, and go to state 28
  $default      reduce using rule 33 (block)

  block         go to state 137

state 132

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  81) actual_params : actual_params "," expr _

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 81 (actual_params)


state 133

  77) array_index_list : array_index_list "]" "[" _ expr

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 65
  "("           shift, and go to state 61
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  function_call  go to state 57
  array_ref     go to state 66
  expr          go to state 138
  pointer_decl  go to state 67

state 134

  34) stmt_list : stmt_list _ stmt
  41) stmt : PRAGMA OMP PARALLEL "{" stmt_list _ "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 139
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt          go to state 76
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 135

  50) compound_stmt : FOR "(" simple_stmt ";" expr _ ";" simple_stmt ")" "{" stmt_list "}"
  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  ";"           shift, and go to state 140


state 136

  51) compound_stmt : WHILE "(" simple_stmt ")" block _

  $default      reduce using rule 51 (compound_stmt)


state 137

  52) compound_stmt : IF "(" simple_stmt ")" block _ optional_else

  ELSE          shift, and go to state 142
  $default      reduce using rule 53 (optional_else)

  optional_else  go to state 141

state 138

  65) expr : expr _ "+" expr
  66) expr : expr _ "-" expr
  67) expr : expr _ "*" expr
  68) expr : expr _ "/" expr
  69) expr : expr _ BOOL_OP expr
  70) expr : expr _ REL_OP expr
  77) array_index_list : array_index_list "]" "[" expr _

  "*"           shift, and go to state 84
  "/"           shift, and go to state 85
  "+"           shift, and go to state 82
  "-"           shift, and go to state 83
  BOOL_OP       shift, and go to state 86
  REL_OP        shift, and go to state 87
  $default      reduce using rule 77 (array_index_list)


state 139

  41) stmt : PRAGMA OMP PARALLEL "{" stmt_list "}" _

  $default      reduce using rule 41 (stmt)


state 140

  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" _ simple_stmt ")" "{" stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 117
  "("           shift, and go to state 61
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  lval          go to state 45
  expr          go to state 49
  pointer_decl  go to state 115
  simple_stmt   go to state 143
  array_ref     go to state 53
  function_call  go to state 57

state 141

  52) compound_stmt : IF "(" simple_stmt ")" block optional_else _

  $default      reduce using rule 52 (compound_stmt)


state 142

  54) optional_else : ELSE _
  55) optional_else : ELSE _ "{" stmt_list "}"

  "{"           shift, and go to state 144
  $default      reduce using rule 54 (optional_else)


state 143

  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt _ ")" "{" stmt_list "}"

  ")"           shift, and go to state 145


state 144

  55) optional_else : ELSE "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt_list     go to state 146
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 145

  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" _ "{" stmt_list "}"

  "{"           shift, and go to state 147


state 146

  34) stmt_list : stmt_list _ stmt
  55) optional_else : ELSE "{" stmt_list _ "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 148
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt          go to state 76
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 147

  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" _ stmt_list "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt_list     go to state 149
  stmt          go to state 38
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 148

  55) optional_else : ELSE "{" stmt_list "}" _

  $default      reduce using rule 55 (optional_else)


state 149

  34) stmt_list : stmt_list _ stmt
  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list _ "}"

  "*"           shift, and go to state 26
  "+"           shift, and go to state 59
  "-"           shift, and go to state 58
  IDENTIFIER    shift, and go to state 36
  "("           shift, and go to state 61
  CHAR          shift, and go to state 7
  INT           shift, and go to state 8
  DOUBLE        shift, and go to state 9
  VOID          shift, and go to state 10
  "}"           shift, and go to state 150
  PRAGMA        shift, and go to state 44
  BREAK         shift, and go to state 46
  CONTINUE      shift, and go to state 47
  RETURN        shift, and go to state 48
  FOR           shift, and go to state 50
  WHILE         shift, and go to state 51
  IF            shift, and go to state 52
  INT_NUM       shift, and go to state 54
  REAL_NUM      shift, and go to state 55
  STRING        shift, and go to state 56
  PREFIX_OP     shift, and go to state 60

  typename      go to state 35
  stmt          go to state 76
  simple_stmt   go to state 39
  compound_stmt  go to state 40
  type_decl     go to state 41
  pointer_decl  go to state 42
  fn_decl       go to state 43
  lval          go to state 45
  expr          go to state 49
  array_ref     go to state 53
  function_call  go to state 57

state 150

  50) compound_stmt : FOR "(" simple_stmt ";" expr ";" simple_stmt ")" "{" stmt_list "}" _

  $default      reduce using rule 50 (compound_stmt)

