#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'


# pcparser.rb: generated by racc

class PCParser < Racc::Parser

module_eval(<<'...end pcparser.y/module_eval...', 'pcparser.y', 209)

  def initialize
    @scanner = Scanner.new
  end

  def parse_array tokens
    yyparse tokens, :each
  end

  def parse_file
    do_parse
  end

  def next_token
    @scanner.next_token
  end

  # override the default error reporting function to report line number
  def on_error err_token_id, err_value, value_stack
    puts "Error at or near line #{@scanner.lineno}, while parsing '#{err_value}' (#{token_to_str(err_token_id)})"
    puts "Current parse stack:"
    (value_stack.length-1).downto(0) {|i| puts "\t#{value_stack[i].to_string}"}
  end

...end pcparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,   -75,    59,    58,   -75,   -75,   106,    36,    61,   127,
    96,    26,     7,     8,     9,    10,   -75,    98,    22,    74,
   150,    44,    23,    97,    78,    46,    47,    48,    50,    51,
    52,    73,    54,    55,    56,    60,    26,    96,    59,    58,
    74,   124,   125,    36,    61,   126,    74,   -56,     7,     8,
     9,    10,   -80,   -56,    33,   -80,   -80,    44,    84,    85,
    34,    46,    47,    48,    50,    51,    52,   -80,    54,    55,
    56,    60,    26,    78,    59,    58,    26,   123,    21,    36,
    61,    32,     4,    70,     7,     8,     9,    10,     7,     8,
     9,    10,   148,    44,    84,    85,    26,    46,    47,    48,
    50,    51,    52,    70,    54,    55,    56,    60,    26,    32,
    59,    58,    20,    21,   130,    36,    61,   131,    28,   133,
     7,     8,     9,    10,    26,    77,    59,    58,    79,    44,
    80,   117,    61,    46,    47,    48,    50,    51,    52,    28,
    54,    55,    56,    60,    28,    26,    88,    59,    58,    46,
    47,    48,    65,    61,    16,    89,    54,    55,    56,    60,
    15,    26,   142,    59,    58,    90,    14,   144,    36,    61,
   145,   -57,   147,     7,     8,     9,    10,    54,    55,    56,
    60,   139,    44,    74,    11,   129,    46,    47,    48,    50,
    51,    52,   nil,    54,    55,    56,    60,    26,   nil,    59,
    58,   nil,   nil,   nil,    65,    61,    26,   nil,    59,    58,
   nil,   nil,   nil,    65,    61,    84,    85,    82,    83,    86,
    87,    84,    85,    82,    83,    86,    87,   nil,   nil,    54,
    55,    56,    60,    95,   nil,   nil,   nil,   140,    54,    55,
    56,    60,    26,   nil,    59,    58,   nil,   nil,   nil,    36,
    61,   nil,   nil,   nil,     7,     8,     9,    10,    84,    85,
    82,    83,    86,    44,   nil,   nil,   nil,    46,    47,    48,
    50,    51,    52,   nil,    54,    55,    56,    60,    26,   nil,
    59,    58,   nil,   nil,   nil,    65,    61,   100,   nil,   nil,
     7,     8,     9,    10,    26,   nil,    59,    58,   nil,   nil,
   nil,    65,    61,    84,    85,    82,    83,    86,    87,   nil,
    54,    55,    56,    60,    26,   nil,    59,    58,   nil,   nil,
   nil,    65,    61,   nil,   nil,   108,    54,    55,    56,    60,
    26,   nil,    59,    58,   nil,   nil,   nil,    65,    61,    84,
    85,    82,    83,    86,    87,   nil,    54,    55,    56,    60,
    26,   nil,    59,    58,   nil,   nil,   nil,    65,    61,   nil,
   nil,   nil,    54,    55,    56,    60,    26,   nil,    59,    58,
   nil,   nil,   nil,    65,    61,    84,    85,    82,    83,    86,
    87,   nil,    54,    55,    56,    60,    26,   nil,    59,    58,
   nil,   nil,   nil,    65,    61,   121,   nil,   nil,    54,    55,
    56,    60,    26,   nil,    59,    58,   nil,   nil,   nil,    36,
    61,   nil,   nil,   nil,     7,     8,     9,    10,    54,    55,
    56,    60,   nil,    44,   nil,   nil,   nil,    46,    47,    48,
    50,    51,    52,   nil,    54,    55,    56,    60,    26,   nil,
    59,    58,   nil,   nil,   nil,    65,    61,    26,   nil,    59,
    58,   nil,   nil,   nil,    65,    61,    64,    26,   nil,    59,
    58,   nil,   nil,   nil,    65,    61,     7,     8,     9,    10,
    54,    55,    56,    60,     7,     8,     9,    10,   nil,    54,
    55,    56,    60,    84,    85,    82,    83,    86,    87,    54,
    55,    56,    60,    26,   nil,    59,    58,   nil,   nil,   nil,
    65,    61,   nil,   nil,    26,   nil,    59,    58,   nil,   nil,
   nil,   117,    61,    26,   nil,    59,    58,   nil,   nil,   nil,
    65,    61,   nil,   nil,   nil,    54,    55,    56,    60,    46,
    47,    48,     7,     8,     9,    10,    54,    55,    56,    60,
    84,    85,    82,    83,   nil,    54,    55,    56,    60,    26,
   nil,    59,    58,   nil,   nil,   nil,   117,    61,   nil,   nil,
    26,   nil,    59,    58,   nil,   nil,   nil,   117,    61,   nil,
    26,   nil,    59,    58,    46,    47,    48,    65,    61,   nil,
   nil,    54,    55,    56,    60,    46,    47,    48,     7,     8,
     9,    10,    54,    55,    56,    60,    84,    85,    82,    83,
    86,    87,    54,    55,    56,    60,    26,   nil,    59,    58,
   nil,   nil,   nil,    65,    61,    26,   nil,    59,    58,   nil,
   nil,   nil,    65,    61,    26,   nil,    59,    58,   nil,   nil,
   nil,    65,    61,     7,     8,     9,    10,   nil,    54,    55,
    56,    60,   nil,   nil,   nil,   nil,   nil,    54,    55,    56,
    60,   nil,   nil,   nil,   nil,   nil,    54,    55,    56,    60,
    26,   nil,    59,    58,   nil,   nil,   nil,    65,    61,    26,
   nil,    59,    58,   nil,   nil,   nil,    65,    61,    84,    85,
    82,    83,    86,    87,   nil,   nil,   nil,   120,   nil,   nil,
   nil,   nil,    54,    55,    56,    60,   nil,   nil,   nil,   nil,
   nil,    54,    55,    56,    60,    26,   nil,    59,    58,   nil,
   nil,   nil,    36,    61,   nil,   nil,   nil,     7,     8,     9,
    10,   nil,   nil,   nil,   nil,    75,    44,   nil,   nil,   nil,
    46,    47,    48,    50,    51,    52,   nil,    54,    55,    56,
    60,    84,    85,    82,    83,    86,    87,    84,    85,    82,
    83,    86,    87,    84,    85,    82,    83,    86,    87,    84,
    85,    82,    83,    86,    87 ]

racc_action_check = [
   149,    42,   149,   149,    42,    42,    79,   149,   149,   106,
    65,    19,   149,   149,   149,   149,    42,    68,    19,    65,
   149,   149,    19,    68,    42,   149,   149,   149,   149,   149,
   149,    36,   149,   149,   149,   149,   147,   117,   147,   147,
    36,   102,   102,   147,   147,   104,   117,    36,   147,   147,
   147,   147,   100,   117,    23,   100,   100,   147,   110,   110,
    26,   147,   147,   147,   147,   147,   147,   100,   147,   147,
   147,   147,   146,   115,   146,   146,    35,    99,    99,   146,
   146,    22,     0,    35,   146,   146,   146,   146,     0,     0,
     0,     0,   146,   146,   109,   109,    98,   146,   146,   146,
   146,   146,   146,    98,   146,   146,   146,   146,   144,    30,
   144,   144,    17,    17,   118,   144,   144,   119,    20,   126,
   144,   144,   144,   144,   140,    39,   140,   140,    44,   144,
    45,   140,   140,   144,   144,   144,   144,   144,   144,   130,
   144,   144,   144,   144,   131,    74,    50,    74,    74,   140,
   140,   140,    74,    74,    14,    51,   140,   140,   140,   140,
    11,   134,   137,   134,   134,    52,     6,   142,   134,   134,
   143,    53,   145,   134,   134,   134,   134,    74,    74,    74,
    74,   134,   134,    70,     1,   116,   134,   134,   134,   134,
   134,   134,   nil,   134,   134,   134,   134,   133,   nil,   133,
   133,   nil,   nil,   nil,   133,   133,   129,   nil,   129,   129,
   nil,   nil,   nil,   129,   129,    63,    63,    63,    63,    63,
    63,   135,   135,   135,   135,   135,   135,   nil,   nil,   133,
   133,   133,   133,    63,   nil,   nil,   nil,   135,   129,   129,
   129,   129,   127,   nil,   127,   127,   nil,   nil,   nil,   127,
   127,   nil,   nil,   nil,   127,   127,   127,   127,   114,   114,
   114,   114,   114,   127,   nil,   nil,   nil,   127,   127,   127,
   127,   127,   127,   nil,   127,   127,   127,   127,    73,   nil,
    73,    73,   nil,   nil,   nil,    73,    73,    73,   nil,   nil,
    73,    73,    73,    73,   125,   nil,   125,   125,   nil,   nil,
   nil,   125,   125,   138,   138,   138,   138,   138,   138,   nil,
    73,    73,    73,    73,    80,   nil,    80,    80,   nil,   nil,
   nil,    80,    80,   nil,   nil,    80,   125,   125,   125,   125,
    78,   nil,    78,    78,   nil,   nil,   nil,    78,    78,   103,
   103,   103,   103,   103,   103,   nil,    80,    80,    80,    80,
   108,   nil,   108,   108,   nil,   nil,   nil,   108,   108,   nil,
   nil,   nil,    78,    78,    78,    78,    82,   nil,    82,    82,
   nil,   nil,   nil,    82,    82,    81,    81,    81,    81,    81,
    81,   nil,   108,   108,   108,   108,    96,   nil,    96,    96,
   nil,   nil,   nil,    96,    96,    96,   nil,   nil,    82,    82,
    82,    82,    28,   nil,    28,    28,   nil,   nil,   nil,    28,
    28,   nil,   nil,   nil,    28,    28,    28,    28,    96,    96,
    96,    96,   nil,    28,   nil,   nil,   nil,    28,    28,    28,
    28,    28,    28,   nil,    28,    28,    28,    28,    32,   nil,
    32,    32,   nil,   nil,   nil,    32,    32,    61,   nil,    61,
    61,   nil,   nil,   nil,    61,    61,    32,    60,   nil,    60,
    60,   nil,   nil,   nil,    60,    60,     3,     3,     3,     3,
    32,    32,    32,    32,    16,    16,    16,    16,   nil,    61,
    61,    61,    61,   101,   101,   101,   101,   101,   101,    60,
    60,    60,    60,    58,   nil,    58,    58,   nil,   nil,   nil,
    58,    58,   nil,   nil,    90,   nil,    90,    90,   nil,   nil,
   nil,    90,    90,    59,   nil,    59,    59,   nil,   nil,   nil,
    59,    59,   nil,   nil,   nil,    58,    58,    58,    58,    90,
    90,    90,    21,    21,    21,    21,    90,    90,    90,    90,
   113,   113,   113,   113,   nil,    59,    59,    59,    59,    89,
   nil,    89,    89,   nil,   nil,   nil,    89,    89,   nil,   nil,
    88,   nil,    88,    88,   nil,   nil,   nil,    88,    88,   nil,
    48,   nil,    48,    48,    89,    89,    89,    48,    48,   nil,
   nil,    89,    89,    89,    89,    88,    88,    88,    13,    13,
    13,    13,    88,    88,    88,    88,   132,   132,   132,   132,
   132,   132,    48,    48,    48,    48,    87,   nil,    87,    87,
   nil,   nil,   nil,    87,    87,    86,   nil,    86,    86,   nil,
   nil,   nil,    86,    86,    85,   nil,    85,    85,   nil,   nil,
   nil,    85,    85,     4,     4,     4,     4,   nil,    87,    87,
    87,    87,   nil,   nil,   nil,   nil,   nil,    86,    86,    86,
    86,   nil,   nil,   nil,   nil,   nil,    85,    85,    85,    85,
    84,   nil,    84,    84,   nil,   nil,   nil,    84,    84,    83,
   nil,    83,    83,   nil,   nil,   nil,    83,    83,    94,    94,
    94,    94,    94,    94,   nil,   nil,   nil,    94,   nil,   nil,
   nil,   nil,    84,    84,    84,    84,   nil,   nil,   nil,   nil,
   nil,    83,    83,    83,    83,    37,   nil,    37,    37,   nil,
   nil,   nil,    37,    37,   nil,   nil,   nil,    37,    37,    37,
    37,   nil,   nil,   nil,   nil,    37,    37,   nil,   nil,   nil,
    37,    37,    37,    37,    37,    37,   nil,    37,    37,    37,
    37,    49,    49,    49,    49,    49,    49,   105,   105,   105,
   105,   105,   105,   128,   128,   128,   128,   128,   128,   107,
   107,   107,   107,   107,   107 ]

racc_action_pointer = [
    71,   184,   nil,   449,   616,   nil,   154,   nil,   nil,   nil,
   nil,   160,   nil,   571,   141,   nil,   457,    98,   nil,     6,
    94,   515,    59,    42,   nil,   nil,    48,   nil,   397,   nil,
    87,   nil,   433,   nil,   nil,    71,    18,   700,   nil,   104,
   nil,   nil,    -5,   nil,   101,   101,   nil,   nil,   565,   736,
   133,   142,   152,   142,   nil,   nil,   nil,   nil,   488,   508,
   452,   442,   nil,   210,   nil,    -3,   nil,   nil,     2,   nil,
   161,   nil,   nil,   273,   140,   nil,   nil,   nil,   325,   -22,
   309,   370,   361,   664,   655,   619,   610,   601,   555,   544,
   499,   nil,   nil,   nil,   673,   nil,   381,   nil,    91,    63,
    46,   478,    27,   334,    22,   742,   -15,   754,   345,    89,
    53,   nil,   nil,   535,   253,    44,   164,    24,   100,   103,
   nil,   nil,   nil,   nil,   nil,   289,    97,   237,   748,   201,
   115,   120,   591,   192,   156,   216,   nil,   126,   298,   nil,
   119,   nil,   143,   156,   103,   148,    67,    31,   nil,    -5,
   nil ]

racc_action_default = [
    -5,   -84,    -1,    -2,    -4,    -7,   -84,   -17,   -18,   -19,
   -20,   -84,    -6,    -3,   -84,   151,   -16,   -84,   -10,   -11,
   -33,   -16,   -12,   -84,   -14,   -15,   -84,    -8,   -84,    -9,
   -27,   -29,   -84,   -13,   -24,   -84,   -59,   -84,   -35,   -84,
   -37,   -38,   -39,   -40,   -84,   -84,   -43,   -44,   -45,   -47,
   -84,   -84,   -84,   -64,   -60,   -61,   -62,   -63,   -84,   -84,
   -84,   -84,   -28,   -84,   -31,   -59,   -64,   -75,   -84,   -23,
   -56,   -57,   -58,   -16,   -84,   -32,   -34,   -36,   -84,   -84,
   -84,   -46,   -84,   -84,   -84,   -84,   -84,   -84,   -84,   -84,
   -84,   -71,   -72,   -73,   -84,   -30,   -83,   -21,   -84,   -84,
   -25,   -82,   -84,   -78,   -84,   -48,   -84,   -42,   -84,   -65,
   -66,   -67,   -68,   -69,   -70,   -75,   -84,   -59,   -84,   -84,
   -74,   -80,   -22,   -26,   -79,   -84,   -76,   -84,   -49,   -84,
   -33,   -33,   -81,   -84,   -84,   -84,   -51,   -53,   -77,   -41,
   -84,   -52,   -54,   -84,   -84,   -84,   -84,   -84,   -55,   -84,
   -50 ]

racc_goto_table = [
    25,    37,    76,    69,    68,    12,    30,    17,    63,    42,
     6,    31,    27,     6,     6,    12,    72,     3,    42,    62,
    53,    13,    24,     6,    81,    29,    19,    71,     1,    53,
   141,    19,     2,   104,    91,    92,    93,    94,   nil,   116,
   118,   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,
   103,   nil,   nil,   nil,   105,   nil,   107,   nil,   109,   110,
   111,   112,   113,   114,    99,   nil,   122,   nil,   nil,   115,
   115,   115,   101,   nil,   nil,   nil,   nil,   nil,   nil,    72,
    53,    53,    53,    19,   128,   nil,   nil,   nil,   nil,   nil,
    71,   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,
   134,   132,   nil,   nil,   nil,   135,   nil,   nil,    42,   138,
   nil,    76,   nil,   nil,    76,    42,   nil,   146,   nil,    53,
   149,   115,   136,   137,   nil,    42,    53,    42,    42,   nil,
    42,   nil,    53,   nil,   nil,   nil,    53,   nil,    53,    53,
   nil,    53 ]

racc_goto_check = [
    10,    18,    19,    13,    12,     4,    15,     6,    17,    10,
     5,    16,     7,     5,     5,     4,    10,     3,    10,    16,
    23,     3,     9,     5,    17,     8,     5,    23,     1,    23,
    22,     5,     2,    25,    17,    17,    17,    17,   nil,    20,
    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,
    17,   nil,   nil,   nil,    17,   nil,    17,   nil,    17,    17,
    17,    17,    17,    17,     6,   nil,    13,   nil,   nil,    10,
    10,    10,    17,   nil,   nil,   nil,   nil,   nil,   nil,    10,
    23,    23,    23,     5,    17,   nil,   nil,   nil,   nil,   nil,
    23,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
    18,    17,   nil,   nil,   nil,    17,   nil,   nil,    10,    17,
   nil,    19,   nil,   nil,    19,    10,   nil,    18,   nil,    23,
    18,    10,     7,     7,   nil,    10,    23,    10,    10,   nil,
    10,   nil,    23,   nil,   nil,   nil,    23,   nil,    23,    23,
   nil,    23 ]

racc_goto_pointer = [
   nil,    28,    32,    17,     2,    10,    -9,    -8,     4,     3,
   -19,   nil,   -31,   -32,   nil,   -16,   -11,   -24,   -27,   -35,
   -49,   nil,  -107,    -8,   nil,   -41,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,    35,   nil,   nil,    18,   nil,
    67,    41,   nil,    45,    43,   nil,   nil,    49,   nil,    38,
    39,    40,   nil,    66,    57,   nil,   102 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 42, :_reduce_1,
  1, 43, :_reduce_2,
  2, 43, :_reduce_3,
  1, 43, :_reduce_4,
  0, 43, :_reduce_5,
  2, 44, :_reduce_6,
  1, 44, :_reduce_7,
  6, 45, :_reduce_8,
  3, 47, :_reduce_9,
  1, 47, :_reduce_10,
  1, 49, :_reduce_11,
  2, 49, :_reduce_12,
  3, 49, :_reduce_13,
  2, 49, :_reduce_14,
  2, 49, :_reduce_15,
  0, 49, :_reduce_16,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  3, 52, :_reduce_21,
  3, 53, :_reduce_22,
  1, 53, :_reduce_none,
  2, 51, :_reduce_24,
  3, 55, :_reduce_25,
  4, 55, :_reduce_26,
  2, 50, :_reduce_27,
  2, 56, :_reduce_28,
  1, 56, :_reduce_29,
  3, 57, :_reduce_30,
  2, 57, :_reduce_31,
  3, 48, :_reduce_32,
  0, 48, :_reduce_33,
  2, 59, :_reduce_34,
  1, 59, :_reduce_35,
  2, 60, :_reduce_36,
  1, 60, :_reduce_37,
  1, 60, :_reduce_38,
  1, 60, :_reduce_39,
  1, 60, :_reduce_none,
  6, 60, :_reduce_41,
  3, 61, :_reduce_42,
  1, 61, :_reduce_43,
  1, 61, :_reduce_44,
  1, 61, :_reduce_45,
  2, 61, :_reduce_46,
  1, 61, :_reduce_47,
  3, 61, :_reduce_48,
  4, 61, :_reduce_49,
  11, 62, :_reduce_50,
  5, 62, :_reduce_51,
  6, 62, :_reduce_52,
  0, 63, :_reduce_53,
  1, 63, :_reduce_54,
  4, 63, :_reduce_55,
  1, 54, :_reduce_56,
  1, 54, :_reduce_none,
  1, 54, :_reduce_58,
  1, 58, :_reduce_59,
  1, 58, :_reduce_60,
  1, 58, :_reduce_61,
  1, 58, :_reduce_62,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  3, 58, :_reduce_65,
  3, 58, :_reduce_66,
  3, 58, :_reduce_67,
  3, 58, :_reduce_68,
  3, 58, :_reduce_69,
  3, 58, :_reduce_70,
  2, 58, :_reduce_71,
  2, 58, :_reduce_72,
  2, 58, :_reduce_73,
  3, 58, :_reduce_74,
  1, 58, :_reduce_75,
  4, 64, :_reduce_76,
  4, 66, :_reduce_77,
  1, 66, :_reduce_78,
  4, 65, :_reduce_79,
  3, 65, :_reduce_80,
  3, 67, :_reduce_81,
  1, 67, :_reduce_82,
  0, 67, :_reduce_83 ]

racc_reduce_n = 84

racc_shift_n = 151

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  :UPLUS => 3,
  :PREFIXOP => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :BOOL_OP => 9,
  :REL_OP => 10,
  :type_decls => 11,
  :IDENTIFIER => 12,
  "(" => 13,
  ")" => 14,
  "," => 15,
  "&" => 16,
  :CHAR => 17,
  :INT => 18,
  :DOUBLE => 19,
  :VOID => 20,
  ";" => 21,
  "[" => 22,
  "]" => 23,
  "{" => 24,
  "}" => 25,
  :PRAGMA => 26,
  :OMP => 27,
  :PARALLEL => 28,
  "=" => 29,
  :BREAK => 30,
  :CONTINUE => 31,
  :RETURN => 32,
  :FOR => 33,
  :WHILE => 34,
  :IF => 35,
  :ELSE => 36,
  :INT_NUM => 37,
  :REAL_NUM => 38,
  :STRING => 39,
  :PREFIX_OP => 40 }

racc_nt_base = 41

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "UPLUS",
  "PREFIXOP",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "BOOL_OP",
  "REL_OP",
  "type_decls",
  "IDENTIFIER",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"&\"",
  "CHAR",
  "INT",
  "DOUBLE",
  "VOID",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "PRAGMA",
  "OMP",
  "PARALLEL",
  "\"=\"",
  "BREAK",
  "CONTINUE",
  "RETURN",
  "FOR",
  "WHILE",
  "IF",
  "ELSE",
  "INT_NUM",
  "REAL_NUM",
  "STRING",
  "PREFIX_OP",
  "$start",
  "target",
  "program",
  "function_defs",
  "function_def",
  "typename",
  "formal_params",
  "block",
  "formal_param",
  "array_formal",
  "pointer_decl",
  "type_decl",
  "decl_list",
  "lval",
  "fn_decl",
  "array_formal_subs",
  "array_formal_sub",
  "expr",
  "stmt_list",
  "stmt",
  "simple_stmt",
  "compound_stmt",
  "optional_else",
  "array_ref",
  "function_call",
  "array_index_list",
  "actual_params" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'pcparser.y', 15)
  def _reduce_1(val, _values, result)
     result = :Program[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 24)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 25)
  def _reduce_3(val, _values, result)
     result = val[0] + val[1]  
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 26)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 27)
  def _reduce_5(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 31)
  def _reduce_6(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 32)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 37)
  def _reduce_8(val, _values, result)
     result = :Function[val[0],val[1],val[3],val[5]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 42)
  def _reduce_9(val, _values, result)
     result =val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 43)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 47)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 48)
  def _reduce_12(val, _values, result)
     result = val[0] , val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 49)
  def _reduce_13(val, _values, result)
     result = val[0] , val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 50)
  def _reduce_14(val, _values, result)
     result = val[0] , val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 51)
  def _reduce_15(val, _values, result)
     result = val[0] , val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 52)
  def _reduce_16(val, _values, result)
     result =  ' '  
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'pcparser.y', 64)
  def _reduce_21(val, _values, result)
     result = :TypeDecls[val[0],val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] + val[1] + val[2]   
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'pcparser.y', 77)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 83)
  def _reduce_25(val, _values, result)
     result = [val[0],:Formals[[]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 84)
  def _reduce_26(val, _values, result)
     result = [val[0],:Formals[val[2]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 88)
  def _reduce_27(val, _values, result)
     result = val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 92)
  def _reduce_28(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 93)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 97)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 98)
  def _reduce_31(val, _values, result)
     result = :EmptySubscript[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 102)
  def _reduce_32(val, _values, result)
     result = :Block[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 106)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 111)
  def _reduce_34(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 112)
  def _reduce_35(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 116)
  def _reduce_36(val, _values, result)
     result  = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 117)
  def _reduce_37(val, _values, result)
     result  = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 118)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 119)
  def _reduce_39(val, _values, result)
    result = val[0] 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'pcparser.y', 121)
  def _reduce_41(val, _values, result)
     result = :parallelPragmaBlock[val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 127)
  def _reduce_42(val, _values, result)
     result = :Assignment[val[0] ,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 128)
  def _reduce_43(val, _values, result)
     result = :BreakStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 129)
  def _reduce_44(val, _values, result)
     result = :ContinueStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 130)
  def _reduce_45(val, _values, result)
     result = :ReturnStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 131)
  def _reduce_46(val, _values, result)
     result = :ReturnStmt[val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 132)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 133)
  def _reduce_48(val, _values, result)
     result = :PointerDecl[val[0] ,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 134)
  def _reduce_49(val, _values, result)
     result = :PointerRef[val[0],val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 139)
  def _reduce_50(val, _values, result)
     result = :For[val[0],val[2],val[4],val[6],val[9]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 140)
  def _reduce_51(val, _values, result)
     result = [val[0],val[2],val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 141)
  def _reduce_52(val, _values, result)
     result = :IfStmt[val[2] ,val[4] ,val[5]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 147)
  def _reduce_53(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 148)
  def _reduce_54(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 149)
  def _reduce_55(val, _values, result)
     result = :ElseStmt[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 153)
  def _reduce_56(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'pcparser.y', 155)
  def _reduce_58(val, _values, result)
    result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 160)
  def _reduce_59(val, _values, result)
     result = :Variable[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 161)
  def _reduce_60(val, _values, result)
     result = :ConstInt[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 162)
  def _reduce_61(val, _values, result)
     result = :ConstReal[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 163)
  def _reduce_62(val, _values, result)
     result = :ConstString[val[0]] 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'pcparser.y', 166)
  def _reduce_65(val, _values, result)
     result = :BinaryOp[val[0], '+', val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 167)
  def _reduce_66(val, _values, result)
     result = :BinaryOp[val[0], '-', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 168)
  def _reduce_67(val, _values, result)
     result = :BinaryOp[val[0], '*', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 169)
  def _reduce_68(val, _values, result)
     result = :BinaryOp[val[0], '/', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 170)
  def _reduce_69(val, _values, result)
     result = :BinaryOp[val[0], val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 171)
  def _reduce_70(val, _values, result)
     result = :BinaryOp[val[0], val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 172)
  def _reduce_71(val, _values, result)
     result = :UnaryOp['=', val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 173)
  def _reduce_72(val, _values, result)
     result = :UnaryOp['+', val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 174)
  def _reduce_73(val, _values, result)
     result = :UnaryOp[val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 175)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 176)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 181)
  def _reduce_76(val, _values, result)
     result = :ArrayRef[val[0] ,val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 185)
  def _reduce_77(val, _values, result)
     result = [val[0],val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 186)
  def _reduce_78(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 190)
  def _reduce_79(val, _values, result)
     result = :FunctionCall[val[0],val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 191)
  def _reduce_80(val, _values, result)
     result =   val[0]+val[1]+val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 195)
  def _reduce_81(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 196)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 197)
  def _reduce_83(val, _values, result)
      
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PCParser


# I suggest not using the footer, unless you want to execute some code once when the parser is included
require 'rubywrite'
require 'PCParse/scanner'
