# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module LLVM::C
  extend FFI::Library
  ffi_lib 'LLVM-3.0'

  # (Not documented)
  # 
  # === Options:
  # :abort_process ::
  #   
  # :print_message ::
  #   verifier will print to stderr and abort()
  # :return_status ::
  #   verifier will print to stderr and return 1
  #
  # @return [Array<Symbol>]
  def self.verifier_failure_action_enum
    [:abort_process, :print_message, :return_status]
  end
  enum :verifier_failure_action, [
    :abort_process,
    :print_message,
    :return_status
  ]

  # Verifies that a module is valid, taking the specified action if not.
  #    Optionally returns a human-readable description of any invalid constructs.
  #    OutMessage must be disposed with LLVMDisposeMessage.
  # 
  # @method verify_module(m, action, out_message)
  # @param [FFI::Pointer(ModuleRef)] m 
  # @param [Symbol from verifier_failure_action_enum] action 
  # @param [FFI::Pointer(**Char_S)] out_message 
  # @return [Integer] 
  # @scope class
  attach_function :verify_module, :LLVMVerifyModule, [:pointer, :verifier_failure_action, :pointer], :int

  # Verifies that a single function is valid, taking the specified action. Useful
  #    for debugging.
  # 
  # @method verify_function(fn, action)
  # @param [FFI::Pointer(ValueRef)] fn 
  # @param [Symbol from verifier_failure_action_enum] action 
  # @return [Integer] 
  # @scope class
  attach_function :verify_function, :LLVMVerifyFunction, [:pointer, :verifier_failure_action], :int

  # Open up a ghostview window that displays the CFG of the current function.
  #    Useful for debugging.
  # 
  # @method view_function_cfg(fn)
  # @param [FFI::Pointer(ValueRef)] fn 
  # @return [nil] 
  # @scope class
  attach_function :view_function_cfg, :LLVMViewFunctionCFG, [:pointer], :void

  # (Not documented)
  # 
  # @method view_function_cfg_only(fn)
  # @param [FFI::Pointer(ValueRef)] fn 
  # @return [nil] 
  # @scope class
  attach_function :view_function_cfg_only, :LLVMViewFunctionCFGOnly, [:pointer], :void

end